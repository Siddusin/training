An unbounded priority queue based on a priority heap. The elements of the priority queue are ordered according to their natural ordering,
or by a Comparator provided at queue construction time, depending on which constructor is used. A priority queue does not permit null elements. 
A priority queue relying on natural ordering also does not permit insertion of non-comparable objects (doing so may result in ClassCastException).
The head of this queue is the least element with respect to the specified ordering. If multiple elements are tied for least value, the head is 
one of those elements -- ties are broken arbitrarily. The queue retrieval operations poll, remove, peek, and element access the element at the 
head of the queue.
A priority queue is unbounded, but has an internal capacity governing the size of an array used to store the elements on the queue. 
It is always at least as large as the queue size. As elements are added to a priority queue, its capacity grows automatically. The details of 
the growth policy are not specified.

This class and its iterator implement all of the optional methods of the Collection and Iterator interfaces. The Iterator provided in method 
iterator() is not guaranteed to traverse the elements of the priority queue in any particular order. If you need ordered traversal, consider 
using Arrays.sort(pq.toArray())
Hash table based implementation of the Map interface, with weak keys. An entry in a WeakHashMap will automatically be removed when its key is 
no longer in ordinary use. More precisely, the presence of a mapping for a given key will not prevent the key from being discarded by the 
garbage collector, that is, made finalizable, finalized, and then reclaimed. When a key has been discarded its entry is effectively removed 
from the map, so this class behaves somewhat differently from other Map implementations.

Both null values and the null key are supported. This class has performance characteristics similar to those of the HashMap class, and has the 
same efficiency parameters of initial capacity and load factor.

Like most collection classes, this class is not synchronized. A synchronized WeakHashMap may be constructed using the Collections.synchronizedMap 
method.

This class is intended primarily for use with key objects whose equals methods test for object identity using the == operator. Once such a key 
is discarded it can never be recreated, so it is impossible to do a lookup of that key in a WeakHashMap at some later time and be surprised that its entry has been removed. This class will work perfectly well with key objects whose equals methods are not based upon object identity, such as String instances. With such recreatable key objects, however, the automatic removal of WeakHashMap entries whose keys have been discarded may prove to be confusing.

The behavior of the WeakHashMap class depends in part upon the actions of the garbage collector, so several familiar (though not required) Map 
invariants do not hold for this class. Because the garbage collector may discard keys at any time, a WeakHashMap may behave as though an unknown thread is silently removing entries. In particular, even if you synchronize on a WeakHashMap instance and invoke none of its mutator methods, it is possible for the size method to return smaller values over time, for the isEmpty method to return false and then true, for the containsKey method to return true and later false for a given key, for the get method to return a value for a given key but later return null, for the put method to return null and the remove method to return false for a key that previously appeared to be in the 
map, and for successive examinations of the key set, the value collection, and the entry set to yield successively smaller numbers of elements.
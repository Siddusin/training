This class implements the Map interface with a hash table, using reference-equality in place of object-equality when comparing keys (and values). 
In other words, in an IdentityHashMap, two keys k1 and k2 are considered equal if and only if (k1==k2). (In normal Map implementations 
(like HashMap) two keys k1 and k2 are considered equal if and only if (k1==null ? k2==null : k1.equals(k2)).)

This class is not a general-purpose Map implementation! While this class implements the Map interface, it intentionally violates Map's general 
contract, which mandates the use of the equals method when comparing objects. This class is designed for use only in the rare cases wherein 
reference-equality semantics are required.

A typical use of this class is topology-preserving object graph transformations, such as serialization or deep-copying. To perform such a 
transformation, a program must maintain a "node table" that keeps track of all the object references that have already been processed. The node 
table must not equate distinct objects even if they happen to be equal. Another typical use of this class is to maintain proxy objects. For 
example, a debugging facility might wish to maintain a proxy object for each object in the program being debugged.

This class provides all of the optional map operations, and permits null values and the null key. This class makes no guarantees as to the 
order of the map; in particular, it does not guarantee that the order will remain constant over time.

This class provides constant-time performance for the basic operations 
(get and put), assuming the system identity hash function (System#identityHashCode(Object)) disperses elements properly among the buckets.